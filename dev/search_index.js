var documenterSearchIndex = {"docs":
[{"location":"api/","page":"API","title":"API","text":"CurrentModule = PersonParameters","category":"page"},{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/#Types","page":"API","title":"Types","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [PersonParameters]\nPrivate = false\nOrder = [:type]","category":"page"},{"location":"api/#PersonParameters.MAP","page":"API","title":"PersonParameters.MAP","text":"struct MAP{T<:Distributions.Distribution{Distributions.Univariate, Distributions.Continuous}} <: PersonParameterAlgorithm\n\nMaximum posterior estimation of person parameters of item response models. Use prior to specify the prior distribution of ability values.\n\nFields\n\nprior: The prior distribution of person abilities\n\n\n\n\n\n","category":"type"},{"location":"api/#PersonParameters.MLE","page":"API","title":"PersonParameters.MLE","text":"struct MLE <: PersonParameterAlgorithm\n\nMaximum likelihood estimation for person parameters of item response models.\n\n\n\n\n\n","category":"type"},{"location":"api/#PersonParameters.PersonParameter","page":"API","title":"PersonParameters.PersonParameter","text":"struct PersonParameter{U<:Real}\n\nA container holding a single estimated person parameter.\n\nFields\n\nvalue: the estimated ability value\nse: the estimated standard error\n\nMethods\n\nvalue: Extract the person parameter estimate\nse: Extract the standard error of estimation\n\n\n\n\n\n","category":"type"},{"location":"api/#PersonParameters.PersonParameterAlgorithm","page":"API","title":"PersonParameters.PersonParameterAlgorithm","text":"abstract type PersonParameterAlgorithm\n\nAn abstract type representing an estimation algorithm for person parameters of an item response model.\n\nEach algorithm must implement the following functions:\n\noptfun: The optimization function passed to the root finding algorithm\nse: Calculation of the standard error of estimation.               Defaults to 1sqrtI(theta), where I is the test information at theta.\n\n\n\n\n\n","category":"type"},{"location":"api/#PersonParameters.PersonParameterResult","page":"API","title":"PersonParameters.PersonParameterResult","text":"struct PersonParameterResult{T<:AbstractItemResponseModels.ItemResponseModel, U<:PersonParameter, V<:PersonParameterAlgorithm}\n\nA collection of estimated person parameters.\n\nFields\n\nvalues: A vector of estimated person parameters\nalgorithm: The algorithm used for estimation\n\nMethods\n\nmodeltype: Get the model type of the scaling model\nalgorithm: Get the algorithm used for estimation\n\n\n\n\n\n","category":"type"},{"location":"api/#PersonParameters.WLE","page":"API","title":"PersonParameters.WLE","text":"PersonParameterWLE\n\nWarm's weighted likelihood estimation for person parameters of item response models.\n\nReferences\n\nWarm, T. A. (1989). Weighted likelihood estimation of ability in item response theory. Psychometrika, 54, 427-450. doi: 10.1007/BF02294627\n\n\n\n\n\n","category":"type"},{"location":"api/#Functions","page":"API","title":"Functions","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [PersonParameters]\nPrivate = false\nOrder = [:function]","category":"page"},{"location":"api/#PersonParameters.algorithm-Tuple{PersonParameterResult}","page":"API","title":"PersonParameters.algorithm","text":"algorithm(pp)\n\n\nGet the algorithm used to calculate the person parameters in pp.\n\nExamples\n\njulia> pp = person_parameters(OnePL, fill(zeros(3), 5), zeros(3), MLE());\n\njulia> algorithm(pp)\nMLE()\n\n\n\n\n\n","category":"method"},{"location":"api/#PersonParameters.modeltype-Union{Tuple{PersonParameterResult{T, U, V}}, Tuple{V}, Tuple{U}, Tuple{T}} where {T, U, V}","page":"API","title":"PersonParameters.modeltype","text":"modeltype(pp)\n\n\nGet the scaling model used to calculate the person parameters in pp.\n\nExamples\n\njulia> pp = person_parameters(TwoPL, fill(zeros(3), 10), fill((a = 1.0, b = 0.0), 3), WLE());\n\njulia> modeltype(pp)\nTwoParameterLogisticModel\n\n\n\n\n\n","category":"method"},{"location":"api/#PersonParameters.person_parameter-Tuple{Type{<:AbstractItemResponseModels.ItemResponseModel}, Any, Any, PersonParameterAlgorithm}","page":"API","title":"PersonParameters.person_parameter","text":"person_parameter(\n    modeltype,\n    responses,\n    betas,\n    alg;\n    init,\n    kwargs...\n)\n\n\nEstimate a single person parameter for an item response theory model (modeltype) from a response vector (responses) given item parameters beta and an estimation algorithm alg.\n\nExamples\n\n1 Parameter Logistic Model\n\njulia> responses = [0, 1, 1, 0, 0];\n\njulia> betas = [0.2, -1.3, 0.4, 1.2, 0.0];\n\njulia> person_parameter(OnePL, responses, betas, MLE())\nPersonParameter{Float64}(-0.34640709530672537, 0.9812365857368596)\n\n3 Parameter Logistic Model\n\njulia> responses = [0, 1, 1];\n\njulia> betas = [(a = 1.0, b = 0.3, c = 0.1), (a = 0.3, b = -0.5, c = 0.0), (a = 1.4, b = 1.1, c = 0.3)];\n\njulia> person_parameter(ThreePL, responses, betas, WLE())\nPersonParameter{Float64}(0.4386489955068812, 1.6080292828245706)\n\n\n\n\n\n","category":"method"},{"location":"api/#PersonParameters.person_parameters-Tuple{Type{<:AbstractItemResponseModels.ItemResponseModel}, AbstractVector, Any, PersonParameterAlgorithm}","page":"API","title":"PersonParameters.person_parameters","text":"person_parameters(modeltype, responses, betas, alg)\n\n\nEstimate person parameters for an item response theory model of type modeltype given item parameters betas, an estimation algorithm alg and responses for each person.\n\nresponses can be a vector of responses where each entry corresponds to the responses for a person, or a response matrix with size(responses) == (n, length(betas)), i.e. each row of the response matrix corresponds to the responses of a single person.\n\nExamples\n\n1 Parameter Logistic Model\n\njulia> responses = [1 1 0; 0 1 0; 1 1 0; 0 0 1]\n4Ã—3 Matrix{Int64}:\n 1  1  0\n 0  1  0\n 1  1  0\n 0  0  1\n\njulia> betas = [-0.1, 0.0, 1.0];\n\njulia> person_parameters(OnePL, responses, betas, MLE());\n\n\n\n\n\n","category":"method"},{"location":"api/#PersonParameters.se-Tuple{PersonParameterAlgorithm, Type{<:AbstractItemResponseModels.ItemResponseModel}, Any, Any}","page":"API","title":"PersonParameters.se","text":"se(alg, modeltype, theta, betas)\n\n\nCalculate the standard error for a person parameter estimate theta given an estimation algorithm (alg), a model type (modeltype), and item parameters (betas).\n\n\n\n\n\n","category":"method"},{"location":"api/#PersonParameters.se-Tuple{PersonParameter}","page":"API","title":"PersonParameters.se","text":"se(pp)\n\n\nExtract the standard error from a PersonParameter estimate pp.\n\nExamples\n\njulia> pp = PersonParameter(0.5, 0.3);\n\njulia> se(pp)\n0.3\n\n\n\n\n\n","category":"method"},{"location":"api/#PersonParameters.value-Tuple{PersonParameter}","page":"API","title":"PersonParameters.value","text":"value(pp)\n\n\nExtract the value from a PersonParameter estimate pp.\n\nExamples\n\njulia> pp = PersonParameter(0.0, 1.0);\n\njulia> value(pp)\n0.0\n\n\n\n\n\n","category":"method"},{"location":"api/#Internals","page":"API","title":"Internals","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"optfun","category":"page"},{"location":"api/#PersonParameters.optfun","page":"API","title":"PersonParameters.optfun","text":"optfun(alg, modeltype, theta, betas, responses)\n\n\nThe optimization function passed to the root finding algorithm.\n\n\n\n\n\n","category":"function"},{"location":"#PersonParameters.jl","page":"Home","title":"PersonParameters.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: Stable) (Image: Dev) (Image: Build Status) (Image: Coverage)","category":"page"},{"location":"","page":"Home","title":"Home","text":"PersonParameters.jl implements estimation of person parameters for Item Response Theory models. Item parameters used in the estimation of person parameters are treated as fixed and known.","category":"page"},{"location":"","page":"Home","title":"Home","text":"It is tightly integrated with ItemResponseFunctions.jl allowing the estimation for all models defined in the package. Currently these are:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Models for dichotomous responses\n1 Parameter Logistic Model\n2 Parameter Logistic Model\n3 Parameter Logistic Model\n4 Parameter Logistic Model\n5 Parameter Logistic Model\nModels for polytomous responses: not implemented yet","category":"page"},{"location":"","page":"Home","title":"Home","text":"Available estimation methods are:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Maximum Likelihood\nWeighted Maximum Likelihood\nMaximum A Posteriori","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"You can install PersonParameters.jl from the General package registry:","category":"page"},{"location":"","page":"Home","title":"Home","text":"] add PersonParameters","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The most common use case is to estimate person parameters from a response matrix and some known item parameters.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Let us define a response matrix (responses) and some item difficulties (betas) estimated by a 1 Parameter Logistic Model.","category":"page"},{"location":"","page":"Home","title":"Home","text":"responses = [\n    0 0 1 1\n    1 1 1 0\n    0 0 1 1\n    1 0 1 0\n    1 1 0 0\n]\n\nbetas = [0.2, -0.5, 1.5, -1.0]","category":"page"},{"location":"","page":"Home","title":"Home","text":"Person parameters can simply be estimated by calling the person_parameters function, providing the data, scaling model and an estimation algorithm as arguments.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using PersonParameters\n\nalg = MLE()\npp = person_parameters(OnePL, responses, betas, alg)","category":"page"},{"location":"","page":"Home","title":"Home","text":"The resulting pp object contains ability estimates for all 5 persons. To get the estimate for a single person you can index the pp object and extract values and standard errors.","category":"page"},{"location":"","page":"Home","title":"Home","text":"pp2 = pp[2]\n\nvalues(pp2)  # 1.3513656133670724\nse(pp2)      # 1.2620475987627175","category":"page"}]
}
